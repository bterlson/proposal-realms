{"version":3,"file":"realm-shim.js","sources":["../src/utilities.js","../src/realmFacade.js","../src/commons.js","../src/stdlib.js","../src/repair/accessors.js","../src/repair/functions.js","../src/unsafeRec.js","../src/optimizer.js","../src/scopeHandler.js","../src/sourceParser.js","../src/evaluators.js","../src/realm.js"],"sourcesContent":["// we'd like to abandon, but we can't, so just scream and break a lot of\r\n// stuff. However, since we aren't really aborting the process, be careful to\r\n// not throw an Error object which could be captured by child-Realm code and\r\n// used to access the (too-powerful) primal-realm Error object.\r\n\r\nexport function throwTantrum(s, err = undefined) {\r\n  const msg = `please report internal shim error: ${s}`;\r\n\r\n  // we want to log these 'should never happen' things.\r\n  // eslint-disable-next-line no-console\r\n  console.error(msg);\r\n  if (err) {\r\n    // eslint-disable-next-line no-console\r\n    console.error(`${err}`);\r\n    // eslint-disable-next-line no-console\r\n    console.error(`${err.stack}`);\r\n  }\r\n\r\n  // eslint-disable-next-line no-debugger\r\n  debugger;\r\n  throw msg;\r\n}\r\n\r\nexport function assert(condition, message) {\r\n  if (!condition) {\r\n    throwTantrum(message);\r\n  }\r\n}\r\n\r\n// Remove code modifications.\r\nexport function cleanupSource(src) {\r\n  /* START_TESTS_ONLY */\r\n\r\n  // Restore eval which is modified by esm module.\r\n  src = src.replace(/\\(0,[^)]+\\)/g, '(0, eval)');\r\n\r\n  // Remove code coverage which is injected by nyc module.\r\n  src = src.replace(/cov_[^+]+\\+\\+[;,]/g, '');\r\n\r\n  /* END_TESTS_ONLY */\r\n  return src;\r\n}\r\n","import { cleanupSource } from './utilities';\r\n\r\n// buildChildRealm is immediately turned into a string, and this function is\r\n// never referenced again, because it closes over the wrong intrinsics\r\n\r\nexport function buildChildRealm(unsafeRec, BaseRealm) {\r\n  const { initRootRealm, initCompartment, getRealmGlobal, realmEvaluate } = BaseRealm;\r\n\r\n  // This Object and Reflect are brand new, from a new unsafeRec, so no user\r\n  // code has been run or had a chance to manipulate them. We extract these\r\n  // properties for brevity, not for security. Don't ever run this function\r\n  // *after* user code has had a chance to pollute its environment, or it\r\n  // could be used to gain access to BaseRealm and primal-realm Error\r\n  // objects.\r\n  const { create, defineProperties } = Object;\r\n\r\n  const errorConstructors = new Map([\r\n    ['EvalError', EvalError],\r\n    ['RangeError', RangeError],\r\n    ['ReferenceError', ReferenceError],\r\n    ['SyntaxError', SyntaxError],\r\n    ['TypeError', TypeError],\r\n    ['URIError', URIError]\r\n  ]);\r\n\r\n  // Like Realm.apply except that it catches anything thrown and rethrows it\r\n  // as an Error from this realm\r\n  function callAndWrapError(target, ...args) {\r\n    try {\r\n      return target(...args);\r\n    } catch (err) {\r\n      if (Object(err) !== err) {\r\n        // err is a primitive value, which is safe to rethrow\r\n        throw err;\r\n      }\r\n      let eName, eMessage, eStack;\r\n      try {\r\n        // The child environment might seek to use 'err' to reach the\r\n        // parent's intrinsics and corrupt them. `${err.name}` will cause\r\n        // string coercion of 'err.name'. If err.name is an object (probably\r\n        // a String of the parent Realm), the coercion uses\r\n        // err.name.toString(), which is under the control of the parent. If\r\n        // err.name were a primitive (e.g. a number), it would use\r\n        // Number.toString(err.name), using the child's version of Number\r\n        // (which the child could modify to capture its argument for later\r\n        // use), however primitives don't have properties like .prototype so\r\n        // they aren't useful for an attack.\r\n        eName = `${err.name}`;\r\n        eMessage = `${err.message}`;\r\n        eStack = `${err.stack}`;\r\n        // eName/eMessage/eStack are now child-realm primitive strings, and\r\n        // safe to expose\r\n      } catch (ignored) {\r\n        // if err.name.toString() throws, keep the (parent realm) Error away\r\n        // from the child\r\n        throw new Error('unknown error');\r\n      }\r\n      const ErrorConstructor = errorConstructors.get(eName) || Error;\r\n      try {\r\n        throw new ErrorConstructor(eMessage);\r\n      } catch (err2) {\r\n        err2.stack = eStack; // replace with the captured inner stack\r\n        throw err2;\r\n      }\r\n    }\r\n  }\r\n\r\n  class Realm {\r\n    constructor() {\r\n      // The Realm constructor is not intended to be used with the new operator\r\n      // or to be subclassed. It may be used as the value of an extends clause\r\n      // of a class definition but a super call to the Realm constructor will\r\n      // cause an exception.\r\n\r\n      // When Realm is called as a function, an exception is also raised because\r\n      // a class constructor cannot be invoked without 'new'.\r\n      throw new TypeError('Realm is not a constructor');\r\n    }\r\n\r\n    static makeRootRealm(options) {\r\n      // This is the exposed interface.\r\n      options = Object(options); // todo: sanitize\r\n\r\n      // Bypass the constructor.\r\n      const r = create(Realm.prototype);\r\n      callAndWrapError(initRootRealm, unsafeRec, r, options);\r\n      return r;\r\n    }\r\n\r\n    static makeCompartment() {\r\n      // Bypass the constructor.\r\n      const r = create(Realm.prototype);\r\n      callAndWrapError(initCompartment, unsafeRec, r);\r\n      return r;\r\n    }\r\n\r\n    // we omit the constructor because it is empty. All the personalization\r\n    // takes place in one of the two static methods,\r\n    // makeRootRealm/makeCompartment\r\n\r\n    get global() {\r\n      // this is safe against being called with strange 'this' because\r\n      // baseGetGlobal immediately does a trademark check (it fails unless\r\n      // this 'this' is present in a weakmap that is only populated with\r\n      // legitimate Realm instances)\r\n      return callAndWrapError(getRealmGlobal, this);\r\n    }\r\n\r\n    evaluate(x, endowments) {\r\n      // safe against strange 'this', as above\r\n      return callAndWrapError(realmEvaluate, this, x, endowments);\r\n    }\r\n  }\r\n\r\n  defineProperties(Realm, {\r\n    toString: {\r\n      value: () => 'function Realm() { [shim code] }',\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: true\r\n    }\r\n  });\r\n\r\n  defineProperties(Realm.prototype, {\r\n    toString: {\r\n      value: () => '[object Realm]',\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: true\r\n    }\r\n  });\r\n\r\n  return Realm;\r\n}\r\n\r\n// The parentheses means we don't bind the 'buildChildRealm' name inside the\r\n// child's namespace. this would accept an anonymous function declaration.\r\n// function expression (not a declaration) so it has a completion value.\r\nconst buildChildRealmString = cleanupSource(`'use strict'; (${buildChildRealm})`);\r\n\r\nexport function createRealmFacade(unsafeRec, BaseRealm) {\r\n  const { unsafeEval } = unsafeRec;\r\n\r\n  // The BaseRealm is the Realm class created by\r\n  // the shim. It's only valid for the context where\r\n  // it was parsed.\r\n\r\n  // The Realm facade is a lightweight class built in the\r\n  // context a different context, that provide a fully\r\n  // functional Realm class using the intrisics\r\n  // of that context.\r\n\r\n  // This process is simplified because all methods\r\n  // and properties on a realm instance already return\r\n  // values using the intrinsics of the realm's context.\r\n\r\n  // Invoke the BaseRealm constructor with Realm as the prototype.\r\n  return unsafeEval(buildChildRealmString)(unsafeRec, BaseRealm);\r\n}\r\n","// Declare shorthand functions. Sharing these declarations across modules\r\n// improves both consistency and minification. Unused declarations are\r\n// dropped by the tree shaking process.\r\n\r\n// we capture these, not just for brevity, but for security. If any code\r\n// modifies Object to change what 'assign' points to, the Realm shim would be\r\n// corrupted.\r\n\r\nexport const {\r\n  assign,\r\n  create,\r\n  freeze,\r\n  defineProperties, // Object.defineProperty is allowed to fail silentlty, use Object.defineProperties instead.\r\n  getOwnPropertyDescriptor,\r\n  getOwnPropertyDescriptors,\r\n  getOwnPropertyNames,\r\n  getPrototypeOf,\r\n  setPrototypeOf\r\n} = Object;\r\n\r\nexport const {\r\n  apply,\r\n  ownKeys // Reflect.ownKeys includes Symbols and unenumerables, unlike Object.keys()\r\n} = Reflect;\r\n\r\n/**\r\n * uncurryThis()\r\n * See http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\r\n * which only lives at http://web.archive.org/web/20160805225710/http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\r\n *\r\n * Performance:\r\n * 1. The native call is about 10x faster on FF than chrome\r\n * 2. The version using Function.bind() is about 100x slower on FF, equal on chrome, 2x slower on Safari\r\n * 3. The version using a spread and Reflect.apply() is about 10x slower on FF, equal on chrome, 2x slower on Safari\r\n *\r\n * const bind = Function.prototype.bind;\r\n * const uncurryThis = bind.bind(bind.call);\r\n */\r\nconst uncurryThis = fn => (thisArg, ...args) => apply(fn, thisArg, args);\r\n\r\n// We also capture these for security: changes to Array.prototype after the\r\n// Realm shim runs shouldn't affect subsequent Realm operations.\r\nexport const objectHasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty),\r\n  arrayForEach = uncurryThis(Array.prototype.forEach),\r\n  arrayFilter = uncurryThis(Array.prototype.filter),\r\n  arrayPush = uncurryThis(Array.prototype.push),\r\n  arrayPop = uncurryThis(Array.prototype.pop),\r\n  arrayJoin = uncurryThis(Array.prototype.join),\r\n  arrayConcat = uncurryThis(Array.prototype.concat),\r\n  regexpTest = uncurryThis(RegExp.prototype.test),\r\n  stringMatch = uncurryThis(String.prototype.match),\r\n  stringIncludes = uncurryThis(String.prototype.includes);\r\n","import { getOwnPropertyDescriptor } from './commons';\r\nimport { assert } from './utilities';\r\n\r\n// All the following stdlib items have the same name on both our intrinsics\r\n// object and on the global object. Unlike Infinity/NaN/undefined, these\r\n// should all be writable and configurable.\r\nconst sharedGlobalPropertyNames = [\r\n  // *** 18.2 Function Properties of the Global Object\r\n\r\n  // 'eval', // comes from safeEval instead\r\n  'isFinite',\r\n  'isNaN',\r\n  'parseFloat',\r\n  'parseInt',\r\n\r\n  'decodeURI',\r\n  'decodeURIComponent',\r\n  'encodeURI',\r\n  'encodeURIComponent',\r\n\r\n  // *** 18.3 Constructor Properties of the Global Object\r\n\r\n  'Array',\r\n  'ArrayBuffer',\r\n  'Boolean',\r\n  'DataView',\r\n  'Date',\r\n  'Error',\r\n  'EvalError',\r\n  'Float32Array',\r\n  'Float64Array',\r\n  // 'Function', // comes from safeFunction instead\r\n  'Int8Array',\r\n  'Int16Array',\r\n  'Int32Array',\r\n  'Map',\r\n  'Number',\r\n  'Object',\r\n  'Promise',\r\n  'Proxy',\r\n  'RangeError',\r\n  'ReferenceError',\r\n  'RegExp',\r\n  'Set',\r\n  // 'SharedArrayBuffer' // removed on Jan 5, 2018\r\n  'String',\r\n  'Symbol',\r\n  'SyntaxError',\r\n  'TypeError',\r\n  'Uint8Array',\r\n  'Uint8ClampedArray',\r\n  'Uint16Array',\r\n  'Uint32Array',\r\n  'URIError',\r\n  'WeakMap',\r\n  'WeakSet',\r\n\r\n  // *** 18.4 Other Properties of the Global Object\r\n\r\n  // 'Atomics', // removed on Jan 5, 2018\r\n  'JSON',\r\n  'Math',\r\n  'Reflect',\r\n\r\n  // *** Annex B\r\n\r\n  'escape',\r\n  'unescape',\r\n\r\n  // *** ECMA-402\r\n\r\n  'Intl'\r\n\r\n  // *** ESNext\r\n\r\n  // 'Realm' // Comes from createRealmGlobalObject()\r\n];\r\n\r\nexport function getSharedGlobalDescs(unsafeGlobal) {\r\n  const descriptors = {\r\n    // *** 18.1 Value Properties of the Global Object\r\n    Infinity: { value: Infinity },\r\n    NaN: { value: NaN },\r\n    undefined: { value: undefined }\r\n  };\r\n\r\n  for (const name of sharedGlobalPropertyNames) {\r\n    const desc = getOwnPropertyDescriptor(unsafeGlobal, name);\r\n    if (desc) {\r\n      // Abort if an accessor is found on the unsafe global object instead of a\r\n      // data property. We should never get into this non standard situation.\r\n      assert('value' in desc, `unexpected accessor on global property: ${name}`);\r\n\r\n      descriptors[name] = {\r\n        value: desc.value,\r\n        writable: true,\r\n        configurable: true\r\n      };\r\n    }\r\n  }\r\n\r\n  return descriptors;\r\n}\r\n","// Adapted from SES/Caja - Copyright (C) 2011 Google Inc.\r\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\r\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\r\n\r\n/**\r\n * Replace the legacy accessors of Object to comply with strict mode\r\n * and ES2016 semantics, we do this by redefining them while in 'use strict'.\r\n *\r\n * todo: list the issues resolved\r\n *\r\n * This function can be used in two ways: (1) invoked directly to fix the primal\r\n * realm's Object.prototype, and (2) converted to a string to be executed\r\n * inside each new RootRealm to fix their Object.prototypes. Evaluation requires\r\n * the function to have no dependencies, so don't import anything from the outside.\r\n */\r\n\r\n// todo: this file should be moved out to a separate repo and npm module.\r\nexport function repairAccessors() {\r\n  const {\r\n    defineProperty,\r\n    defineProperties,\r\n    getOwnPropertyDescriptor,\r\n    getPrototypeOf,\r\n    prototype: objectPrototype\r\n  } = Object;\r\n\r\n  // On some platforms, the implementation of these functions act as if they are\r\n  // in sloppy mode: if they're invoked badly, they will expose the global object,\r\n  // so we need to repair these for security. Thus it is our responsibility to fix\r\n  // this, and we need to include repairAccessors. E.g. Chrome in 2016.\r\n\r\n  try {\r\n    // Verify that the method is not callable.\r\n    // eslint-disable-next-line no-restricted-properties, no-underscore-dangle\r\n    (0, objectPrototype.__lookupGetter__)('x');\r\n  } catch (ignore) {\r\n    // Throws, no need to patch.\r\n    return;\r\n  }\r\n\r\n  function toObject(obj) {\r\n    if (obj === undefined || obj === null) {\r\n      throw new TypeError(`can't convert undefined or null to object`);\r\n    }\r\n    return Object(obj);\r\n  }\r\n\r\n  function asPropertyName(obj) {\r\n    if (typeof obj === 'symbol') {\r\n      return obj;\r\n    }\r\n    return `${obj}`;\r\n  }\r\n\r\n  function aFunction(obj, accessor) {\r\n    if (typeof obj !== 'function') {\r\n      throw TypeError(`invalid ${accessor} usage`);\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  defineProperties(objectPrototype, {\r\n    __defineGetter__: {\r\n      value: function __defineGetter__(prop, func) {\r\n        const O = toObject(this);\r\n        defineProperty(O, prop, {\r\n          get: aFunction(func, 'getter'),\r\n          enumerable: true,\r\n          configurable: true\r\n        });\r\n      }\r\n    },\r\n    __defineSetter__: {\r\n      value: function __defineSetter__(prop, func) {\r\n        const O = toObject(this);\r\n        defineProperty(O, prop, {\r\n          set: aFunction(func, 'setter'),\r\n          enumerable: true,\r\n          configurable: true\r\n        });\r\n      }\r\n    },\r\n    __lookupGetter__: {\r\n      value: function __lookupGetter__(prop) {\r\n        let O = toObject(this);\r\n        prop = asPropertyName(prop);\r\n        let desc;\r\n        while (O && !(desc = getOwnPropertyDescriptor(O, prop))) {\r\n          O = getPrototypeOf(O);\r\n        }\r\n        return desc && desc.get;\r\n      }\r\n    },\r\n    __lookupSetter__: {\r\n      value: function __lookupSetter__(prop) {\r\n        let O = toObject(this);\r\n        prop = asPropertyName(prop);\r\n        let desc;\r\n        while (O && !(desc = getOwnPropertyDescriptor(O, prop))) {\r\n          O = getPrototypeOf(O);\r\n        }\r\n        return desc && desc.set;\r\n      }\r\n    }\r\n  });\r\n}\r\n","// Adapted from SES/Caja\r\n// Copyright (C) 2011 Google Inc.\r\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\r\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\r\n\r\n/**\r\n * This block replaces the original Function constructor, and the original\r\n * %GeneratorFunction% %AsyncFunction% and %AsyncGeneratorFunction%, with\r\n * safe replacements that throw if invoked.\r\n *\r\n * These are all reachable via syntax, so it isn't sufficient to just\r\n * replace global properties with safe versions. Our main goal is to prevent\r\n * access to the Function constructor through these starting points.\r\n\r\n * After this block is done, the originals must no longer be reachable, unless\r\n * a copy has been made, and funtions can only be created by syntax (using eval)\r\n * or by invoking a previously saved reference to the originals.\r\n */\r\n\r\n// todo: this file should be moved out to a separate repo and npm module.\r\nexport function repairFunctions() {\r\n  const { defineProperties, getPrototypeOf, setPrototypeOf } = Object;\r\n\r\n  /**\r\n   * The process to repair constructors:\r\n   * 1. Create an instance of the function by evaluating syntax\r\n   * 2. Obtain the prototype from the instance\r\n   * 3. Create a substitute tamed constructor\r\n   * 4. Replace the original constructor with the tamed constructor\r\n   * 5. Replace tamed constructor prototype property with the original one\r\n   * 6. Replace its [[Prototype]] slot with the tamed constructor of Function\r\n   */\r\n  function repairFunction(name, declaration) {\r\n    let FunctionInstance;\r\n    try {\r\n      // eslint-disable-next-line no-new-func\r\n      FunctionInstance = (0, eval)(declaration);\r\n    } catch (e) {\r\n      if (e instanceof SyntaxError) {\r\n        // Prevent failure on platforms where async and/or generators are not supported.\r\n        return;\r\n      }\r\n      // Re-throw\r\n      throw e;\r\n    }\r\n    const FunctionPrototype = getPrototypeOf(FunctionInstance);\r\n\r\n    // Prevents the evaluation of source when calling constructor on the prototype of functions.\r\n    // eslint-disable-next-line no-new-func\r\n    const TamedFunction = Function('throw new TypeError(\"Not available\");');\r\n    defineProperties(TamedFunction, { name: { value: name } });\r\n\r\n    // (new Error()).constructors does not inherit from Function, because Error\r\n    // was defined before ES6 classes. So we don't need to repair it too.\r\n\r\n    // (Error()).constructor inherit from Function, which gets a tamed constructor here.\r\n\r\n    // todo: in an ES6 class that does not inherit from anything, what does its\r\n    // constructor inherit from? We worry that it inherits from Function, in\r\n    // which case instances could give access to unsafeFunction. markm says\r\n    // we're fine: the constructor inherits from Object.prototype\r\n\r\n    // This line replaces the original constructor in the prototype chain\r\n    // with the tamed one. No copy of the original is peserved.\r\n    defineProperties(FunctionPrototype, { constructor: { value: TamedFunction } });\r\n\r\n    // This line sets the tamed constructor's prototype data property to\r\n    // the original one.\r\n    defineProperties(TamedFunction, { prototype: { value: FunctionPrototype } });\r\n\r\n    if (TamedFunction !== Function.prototype.constructor) {\r\n      // Ensures that all functions meet \"instanceof Function\" in a realm.\r\n      setPrototypeOf(TamedFunction, Function.prototype.constructor);\r\n    }\r\n  }\r\n\r\n  // Here, the order of operation is important: Function needs to be repaired\r\n  // first since the other repaired constructors need to inherit from the tamed\r\n  // Function function constructor.\r\n\r\n  // note: this really wants to be part of the standard, because new\r\n  // constructors may be added in the future, reachable from syntax, and this\r\n  // list must be updated to match.\r\n\r\n  // \"plain arrow functions\" inherit from Function.prototype\r\n\r\n  repairFunction('Function', '(function(){})');\r\n  repairFunction('GeneratorFunction', '(function*(){})');\r\n  repairFunction('AsyncFunction', '(async function(){})');\r\n  repairFunction('AsyncGeneratorFunction', '(async function*(){})');\r\n}\r\n","// this module must never be importable outside the Realm shim itself\r\nimport { getSharedGlobalDescs } from './stdlib';\r\nimport { repairAccessors } from './repair/accessors';\r\nimport { repairFunctions } from './repair/functions';\r\nimport { cleanupSource } from './utilities';\r\nimport { freeze } from './commons';\r\n\r\n// A \"context\" is a fresh unsafe Realm as given to us by existing platforms.\r\n// We need this to implement the shim. However, when Realms land for real,\r\n// this feature will be provided by the underlying engine instead.\r\n\r\n// Platform detection.\r\nconst isNode =\r\n  typeof process === 'object' &&\r\n  process.browser !== true &&\r\n  typeof exports === 'object' &&\r\n  typeof module !== 'undefined';\r\nconst isBrowser =\r\n  (typeof process === 'object' && process.browser === true) || typeof document === 'object';\r\nif ((!isNode && !isBrowser) || (isNode && isBrowser)) {\r\n  throw new Error('unexpected platform, unable to create Realm');\r\n}\r\nconst vm = isNode ? require('vm') : undefined;\r\n\r\n// note: in a node module, the top-level 'this' is not the global object\r\n// (it's *something* but we aren't sure what), however an indirect eval of\r\n// 'this' will be the correct global object.\r\n\r\nconst unsafeGlobalSrc = \"'use strict'; this\";\r\nconst unsafeGlobalEvalSrc = `(0, eval)(\"'use strict'; this\")`;\r\n\r\n// This method is only exported for testing purposes.\r\nexport function createNewUnsafeGlobalForNode() {\r\n  // Use unsafeGlobalEvalSrc to ensure we get the right 'this'.\r\n  const unsafeGlobal = vm.runInNewContext(unsafeGlobalEvalSrc);\r\n\r\n  return unsafeGlobal;\r\n}\r\n\r\n// This method is only exported for testing purposes.\r\nexport function createNewUnsafeGlobalForBrowser() {\r\n  const iframe = document.createElement('iframe');\r\n  iframe.style.display = 'none';\r\n\r\n  document.body.appendChild(iframe);\r\n  const unsafeGlobal = iframe.contentWindow.eval(unsafeGlobalSrc);\r\n\r\n  // We keep the iframe attached to the DOM because removing it\r\n  // causes its global object to lose intrinsics, its eval()\r\n  // function to evaluate code, etc.\r\n\r\n  // TODO: can we remove and garbage-collect the iframes?\r\n\r\n  return unsafeGlobal;\r\n}\r\n\r\nconst getNewUnsafeGlobal = isNode ? createNewUnsafeGlobalForNode : createNewUnsafeGlobalForBrowser;\r\n\r\n// The unsafeRec is shim-specific. It acts as the mechanism to obtain a fresh\r\n// set of intrinsics together with their associated eval and Function\r\n// evaluators. These must be used as a matched set, since the evaluators are\r\n// tied to a set of intrinsics, aka the \"undeniables\". If it were possible to\r\n// mix-and-match them from different contexts, that would enable some\r\n// attacks.\r\nfunction createUnsafeRec(unsafeGlobal, allShims = []) {\r\n  const sharedGlobalDescs = getSharedGlobalDescs(unsafeGlobal);\r\n\r\n  return freeze({\r\n    unsafeGlobal,\r\n    sharedGlobalDescs,\r\n    unsafeEval: unsafeGlobal.eval,\r\n    unsafeFunction: unsafeGlobal.Function,\r\n    allShims\r\n  });\r\n}\r\n\r\nconst repairAccessorsShim = cleanupSource(`\"use strict\"; (${repairAccessors})();`);\r\nconst repairFunctionsShim = cleanupSource(`\"use strict\"; (${repairFunctions})();`);\r\n\r\n// Create a new unsafeRec from a brand new context, with new intrinsics and a\r\n// new global object\r\nexport function createNewUnsafeRec(allShims) {\r\n  const unsafeGlobal = getNewUnsafeGlobal();\r\n  unsafeGlobal.eval(repairAccessorsShim);\r\n  unsafeGlobal.eval(repairFunctionsShim);\r\n  return createUnsafeRec(unsafeGlobal, allShims);\r\n}\r\n\r\n// Create a new unsafeRec from the current context, where the Realm shim is\r\n// being parsed and executed, aka the \"Primal Realm\"\r\nexport function createCurrentUnsafeRec() {\r\n  const unsafeGlobal = (0, eval)(unsafeGlobalSrc);\r\n  repairAccessors();\r\n  repairFunctions();\r\n  return createUnsafeRec(unsafeGlobal);\r\n}\r\n","import {\r\n  arrayFilter,\r\n  getOwnPropertyDescriptors,\r\n  getOwnPropertyNames,\r\n  objectHasOwnProperty,\r\n  regexpTest\r\n} from './commons';\r\n\r\n// todo: think about how this interacts with endowments, check for conflicts\r\n// between the names being optimized and the ones added by endowments\r\n\r\n/**\r\n * Simplified validation of indentifier names: may only contain alphanumeric\r\n * characters (or \"$\" or \"_\"), and may not start with a digit. This is safe\r\n * and does not reduces the compatibility of the shim. The motivation for\r\n * this limitation was to decrease the complexity of the implementation,\r\n * and to maintain a resonable level of performance.\r\n * Note: \\w is equivalent [a-zA-Z_0-9]\r\n * See 11.6.1 Identifier Names\r\n */\r\nconst identifierPattern = /^[a-zA-Z_$][\\w$]*$/;\r\n\r\n/**\r\n * In JavaScript you cannot use these reserved words as variables.\r\n * See 11.6.1 Identifier Names\r\n */\r\nconst keywords = new Set([\r\n  // 11.6.2.1 Keywords\r\n  'await',\r\n  'break',\r\n  'case',\r\n  'catch',\r\n  'class',\r\n  'const',\r\n  'continue',\r\n  'debugger',\r\n  'default',\r\n  'delete',\r\n  'do',\r\n  'else',\r\n  'export',\r\n  'extends',\r\n  'finally',\r\n  'for',\r\n  'function',\r\n  'if',\r\n  'import',\r\n  'in',\r\n  'instanceof',\r\n  'new',\r\n  'return',\r\n  'super',\r\n  'switch',\r\n  'this',\r\n  'throw',\r\n  'try',\r\n  'typeof',\r\n  'var',\r\n  'void',\r\n  'while',\r\n  'with',\r\n  'yield',\r\n\r\n  // Also reserved when parsing strict mode code\r\n  'let',\r\n  'static',\r\n\r\n  // 11.6.2.2 Future Reserved Words\r\n  'enum',\r\n\r\n  // Also reserved when parsing strict mode code\r\n  'implements',\r\n  'package',\r\n  'protected',\r\n  'interface',\r\n  'private',\r\n  'public',\r\n\r\n  // Reserved but not mentioned in specs\r\n  'await',\r\n\r\n  'null',\r\n  'true',\r\n  'false',\r\n\r\n  'this',\r\n  'arguments'\r\n]);\r\n\r\n/**\r\n * getOptimizableGlobals()\r\n * What variable names might it bring into scope? These include all\r\n * property names which can be variable names, including the names\r\n * of inherited properties. It excludes symbols and names which are\r\n * keywords. We drop symbols safely. Currently, this shim refuses\r\n * service if any of the names are keywords or keyword-like. This is\r\n * safe and only prevent performance optimization.\r\n */\r\nexport function getOptimizableGlobals(safeGlobal) {\r\n  const descs = getOwnPropertyDescriptors(safeGlobal);\r\n\r\n  // getOwnPropertyNames does ignore Symbols so we don't need this extra check:\r\n  // typeof name === 'string' &&\r\n  const constants = arrayFilter(getOwnPropertyNames(descs), name => {\r\n    // Ensure we have a valid identifier. We use regexpTest rather than\r\n    // /../.test() to guard against the case where RegExp has been poisoned.\r\n    if (name === 'eval' || keywords.has(name) || !regexpTest(identifierPattern, name)) {\r\n      return false;\r\n    }\r\n\r\n    const desc = descs[name];\r\n    return (\r\n      //\r\n      // The getters will not have .writable, don't let the falsyness of\r\n      // 'undefined' trick us: test with === false, not ! . However descriptors\r\n      // inherit from the (potentially poisoned) global object, so we might see\r\n      // extra properties which weren't really there. Accessor properties have\r\n      // 'get/set/enumerable/configurable', while data properties have\r\n      // 'value/writable/enumerable/configurable'.\r\n      desc.configurable === false &&\r\n      desc.writable === false &&\r\n      //\r\n      // Checks for data properties because they're the only ones we can\r\n      // optimize (accessors are most likely non-constant). Descriptors can't\r\n      // can't have accessors and value properties at the same time, therefore\r\n      // this check is sufficient. Using explicit own property deal with the\r\n      // case where Object.prototype has been poisoned.\r\n      objectHasOwnProperty(desc, 'value')\r\n    );\r\n  });\r\n\r\n  return constants;\r\n}\r\n","import { freeze, getPrototypeOf, objectHasOwnProperty } from './commons';\r\nimport { throwTantrum } from './utilities';\r\n\r\n/**\r\n * alwaysThrowHandler is a proxy handler which throws on any trap called.\r\n * It's made from a proxy with a get trap that throws. Its target is\r\n * an immutable (frozen) object and is safe to share.\r\n */\r\nconst alwaysThrowHandler = new Proxy(freeze({}), {\r\n  get(target, prop) {\r\n    throwTantrum(`unexpected scope handler trap called: ${prop}`);\r\n  }\r\n});\r\n\r\n/**\r\n * ScopeHandler manages a Proxy which serves as the global scope for the\r\n * safeEvaluator operation (the Proxy is the argument of a 'with' binding).\r\n * As described in createSafeEvaluator(), it has several functions:\r\n * - allow the very first (and only the very first) use of 'eval' to map to\r\n *   the real (unsafe) eval function, so it acts as a 'direct eval' and can\r\n *    access its lexical scope (which maps to the 'with' binding, which the\r\n *   ScopeHandler also controls).\r\n * - ensure that all subsequent uses of 'eval' map to the safeEvaluator,\r\n *   which lives as the 'eval' property of the safeGlobal.\r\n * - route all other property lookups at the safeGlobal.\r\n * - hide the unsafeGlobal which lives on the scope chain above the 'with'.\r\n * - ensure the Proxy invariants despite some global properties being frozen.\r\n */\r\nexport function createScopeHandler(unsafeRec) {\r\n  const { unsafeGlobal, unsafeEval } = unsafeRec;\r\n\r\n  // This flag allow us to determine if the eval() call is an done by the\r\n  // realm's code or if it is user-land invocation, so we can react differently.\r\n  let useUnsafeEvaluator = false;\r\n\r\n  return {\r\n    // The scope handler throws if any trap other than get/set/has are run\r\n    // (e.g. getOwnPropertyDescriptors, apply, getPrototypeOf).\r\n    // eslint-disable-next-line no-proto\r\n    __proto__: alwaysThrowHandler,\r\n\r\n    allowUnsafeEvaluatorOnce() {\r\n      useUnsafeEvaluator = true;\r\n    },\r\n\r\n    unsafeEvaluatorAllowed() {\r\n      return useUnsafeEvaluator;\r\n    },\r\n\r\n    get(target, prop) {\r\n      // Special treatment for eval. The very first lookup of 'eval' gets the\r\n      // unsafe (real direct) eval, so it will get the lexical scope that uses\r\n      // the 'with' context.\r\n      if (prop === 'eval') {\r\n        // test that it is true rather than merely truthy\r\n        if (useUnsafeEvaluator === true) {\r\n          // revoke before use\r\n          useUnsafeEvaluator = false;\r\n          return unsafeEval;\r\n        }\r\n        return target.eval;\r\n      }\r\n\r\n      // todo: shim integrity, capture Symbol.unscopables\r\n      if (prop === Symbol.unscopables) {\r\n        // Safe to return a primal realm Object here because the only code that\r\n        // can do a get() on a non-string is the internals of with() itself,\r\n        // and the only thing it does is to look for properties on it. User\r\n        // code cannot do a lookup on non-strings.\r\n        return undefined;\r\n      }\r\n\r\n      // Properties of the global.\r\n      if (prop in target) {\r\n        return target[prop];\r\n      }\r\n\r\n      // Prevent the lookup for other properties.\r\n      return undefined;\r\n    },\r\n\r\n    // eslint-disable-next-line class-methods-use-this\r\n    set(target, prop, value) {\r\n      // todo: allow modifications when target.hasOwnProperty(prop) and it\r\n      // is writable, assuming we've already rejected overlap (see\r\n      // createSafeEvaluatorFactory.factory). This TypeError gets replaced with\r\n      // target[prop] = value\r\n      if (objectHasOwnProperty(target, prop)) {\r\n        // todo: shim integrity: TypeError, String\r\n        throw new TypeError(`do not modify endowments like ${String(prop)}`);\r\n      }\r\n\r\n      // todo (optimization): keep a reference to the shadow avoids calling\r\n      // getPrototypeOf on the target every time the set trap is invoked,\r\n      // since safeGlobal === getPrototypeOf(target).\r\n      getPrototypeOf(target)[prop] = value;\r\n\r\n      // Return true after successful set.\r\n      return true;\r\n    },\r\n\r\n    // we need has() to return false for some names to prevent the lookup  from\r\n    // climbing the scope chain and eventually reaching the unsafeGlobal\r\n    // object, which is bad.\r\n\r\n    // note: unscopables! every string in Object[Symbol.unscopables]\r\n\r\n    // todo: we'd like to just have has() return true for everything, and then\r\n    // use get() to raise a ReferenceError for anything not on the safe global.\r\n    // But we want to be compatible with ReferenceError in the normal case and\r\n    // the lack of ReferenceError in the 'typeof' case. Must either reliably\r\n    // distinguish these two cases (the trap behavior might be different), or\r\n    // we rely on a mandatory source-to-source transform to change 'typeof abc'\r\n    // to XXX. We already need a mandatory parse to prevent the 'import',\r\n    // since it's a special form instead of merely being a global variable/\r\n\r\n    // note: if we make has() return true always, then we must implement a\r\n    // set() trap to avoid subverting the protection of strict mode (it would\r\n    // accept assignments to undefined globals, when it ought to throw\r\n    // ReferenceError for such assignments)\r\n\r\n    has(target, prop) {\r\n      // proxies stringify 'prop', so no TOCTTOU danger here\r\n\r\n      // unsafeGlobal: hide all properties of unsafeGlobal at the expense of 'typeof'\r\n      // being wrong for those properties. For example, in the browser, evaluating\r\n      // 'document = 3', will add a property to  safeGlobal instead of throwing a\r\n      // ReferenceError.\r\n      if (prop === 'eval' || prop in target || prop in unsafeGlobal) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n  };\r\n}\r\n","// this \\s *must* match all kinds of syntax-defined whitespace. If e.g.\r\n// U+2028 (LINE SEPARATOR) or U+2029 (PARAGRAPH SEPARATOR) is treated as\r\n// whitespace by the parser, but not matched by /\\s/, then this would admit\r\n// an attack like: import\\u2028('power.js') . We're trying to distinguish\r\n// something like that from something like importnotreally('power.js') which\r\n// is perfectly safe.\r\n\r\nconst importParser = /^(.*)\\bimport\\s*(\\(|\\/\\/|\\/\\*)/m;\r\n\r\nexport function rejectImportExpressions(s) {\r\n  const matches = importParser.exec(s);\r\n  if (matches) {\r\n    // todo: if we have a full parser available, use it here. If there is no\r\n    // 'import' token in the string, we're safe.\r\n    // if (!parse(s).contains('import')) return;\r\n    const linenum = matches[1].split('\\n').length; // more or less\r\n    throw new SyntaxError(`possible import expression rejected around line ${linenum}`);\r\n  }\r\n}\r\n","// Portions adapted from V8 - Copyright 2016 the V8 project authors.\r\n// https://github.com/v8/v8/blob/master/src/builtins/builtins-function.cc\r\n\r\nimport {\r\n  apply,\r\n  arrayJoin,\r\n  arrayPop,\r\n  create,\r\n  defineProperties,\r\n  getOwnPropertyDescriptors,\r\n  getPrototypeOf,\r\n  regexpTest,\r\n  setPrototypeOf,\r\n  stringIncludes\r\n} from './commons';\r\nimport { getOptimizableGlobals } from './optimizer';\r\nimport { createScopeHandler } from './scopeHandler';\r\nimport { rejectImportExpressions } from './sourceParser';\r\nimport { assert, throwTantrum } from './utilities';\r\n\r\nfunction buildOptimizer(constants) {\r\n  // No need to build an oprimizer when there are no constants.\r\n  if (constants.length === 0) return '';\r\n  // Use 'this' to avoid going through the scope proxy, which is unecessary\r\n  // since the optimizer only needs references to the safe global.\r\n  return `const {${arrayJoin(constants, ',')}} = this;`;\r\n}\r\n\r\nfunction createScopedEvaluatorFactory(unsafeRec, constants) {\r\n  const { unsafeFunction } = unsafeRec;\r\n\r\n  const optimizer = buildOptimizer(constants);\r\n\r\n  // Create a function in sloppy mode, so that we can use 'with'. It returns\r\n  // a function in strict mode that evaluates the provided code using direct\r\n  // eval, and thus in strict mode in the same scope. We must be very careful\r\n  // to not create new names in this scope\r\n\r\n  // 1: we use 'with' (around a Proxy) to catch all free variable names. The\r\n  // first 'arguments[0]' holds the Proxy which safely wraps the safeGlobal\r\n  // 2: 'optimizer' catches common variable names for speed\r\n  // 3: The inner strict function is effectively passed two parameters:\r\n  //    a) its arguments[0] is the source to be directly evaluated.\r\n  //    b) its 'this' is the this binding seen by the code being directly evaluated.\r\n\r\n  // everything in the 'optimizer' string is looked up in the proxy\r\n  // (including an 'arguments[0]', which points at the Proxy). 'function' is\r\n  // a keyword, not a variable, so it is not looked up. then 'eval' is looked\r\n  // up in the proxy, that's the first time it is looked up after\r\n  // useUnsafeEvaluator is turned on, so the proxy returns the real the\r\n  // unsafeEval, which satisfies the IsDirectEvalTrap predicate, so it uses\r\n  // the direct eval and gets the lexical scope. The second 'arguments[0]' is\r\n  // looked up in the context of the inner function. The *contents* of\r\n  // arguments[0], because we're using direct eval, are looked up in the\r\n  // Proxy, by which point the useUnsafeEvaluator switch has been flipped\r\n  // back to 'false', so any instances of 'eval' in that string will get the\r\n  // safe evaluator.\r\n\r\n  return unsafeFunction(`\r\n    with (arguments[0]) {\r\n      ${optimizer}\r\n      return function() {\r\n        'use strict';\r\n        return eval(arguments[0]);\r\n      };\r\n    }\r\n  `);\r\n}\r\n\r\nexport function createSafeEvaluatorFactory(unsafeRec, safeGlobal) {\r\n  const { unsafeFunction } = unsafeRec;\r\n\r\n  const scopeHandler = createScopeHandler(unsafeRec);\r\n  const optimizableGlobals = getOptimizableGlobals(safeGlobal);\r\n  const scopedEvaluatorFactory = createScopedEvaluatorFactory(unsafeRec, optimizableGlobals);\r\n\r\n  function factory(endowments = {}) {\r\n    // todo (shim limitation): scan endowments, throw error if endowment\r\n    // overlaps with the const optimization (which would otherwise\r\n    // incorrectly shadow endowments), or if endowments includes 'eval'. Also\r\n    // prohibit accessor properties (to be able to consistently explain\r\n    // things in terms of shimming the global lexical scope).\r\n    // writeable-vs-nonwritable == let-vs-const, but there's no\r\n    // global-lexical-scope equivalent of an accessor, outside what we can\r\n    // explain/spec\r\n    const scopeTarget = create(safeGlobal, getOwnPropertyDescriptors(endowments));\r\n    const scopeProxy = new Proxy(scopeTarget, scopeHandler);\r\n    const scopedEvaluator = apply(scopedEvaluatorFactory, safeGlobal, [scopeProxy]);\r\n\r\n    // We use the the concise method syntax to create an eval without a\r\n    // [[Construct]] behavior (such that the invocation \"new eval()\" throws\r\n    // TypeError: eval is not a constructor\"), but which still accepts a\r\n    // 'this' binding.\r\n    const safeEval = {\r\n      eval(src) {\r\n        src = `${src}`;\r\n        rejectImportExpressions(src);\r\n        scopeHandler.allowUnsafeEvaluatorOnce();\r\n        let err;\r\n        try {\r\n          // Ensure that \"this\" resolves to the safe global.\r\n          return apply(scopedEvaluator, safeGlobal, [src]);\r\n        } catch (e) {\r\n          // stash the child-code error in hopes of debugging the internal failure\r\n          err = e;\r\n          throw e;\r\n        } finally {\r\n          // belt and suspenders: the proxy switches this off immediately after\r\n          // the first access, but if that's not the case we abort.\r\n          if (scopeHandler.unsafeEvaluatorAllowed()) {\r\n            throwTantrum('handler did not revoke useUnsafeEvaluator', err);\r\n          }\r\n        }\r\n      }\r\n    }.eval;\r\n\r\n    // safeEval's prototype is currently the primal realm's\r\n    // Function.prototype, which we must not let escape. To make 'eval\r\n    // instanceof Function' be true inside the realm, we need to point it at\r\n    // the RootRealm's value.\r\n\r\n    // Ensure that eval from any compartment in a root realm is an instance\r\n    // of Function in any compartment of the same root realm.\r\n    setPrototypeOf(safeEval, unsafeFunction.prototype);\r\n\r\n    assert(getPrototypeOf(safeEval).constructor !== Function, 'hide Function');\r\n    assert(getPrototypeOf(safeEval).constructor !== unsafeFunction, 'hide unsafeFunction');\r\n\r\n    // note: be careful to not leak our primal Function.prototype by setting\r\n    // this to a plain arrow function. Now that we have safeEval, use it.\r\n    defineProperties(safeEval, {\r\n      toString: {\r\n        value: safeEval(\"() => 'function eval() { [shim code] }'\"),\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: true\r\n      }\r\n    });\r\n\r\n    return safeEval;\r\n  }\r\n\r\n  return factory;\r\n}\r\n\r\nexport function createSafeEvaluator(safeEvaluatorFactory) {\r\n  return safeEvaluatorFactory();\r\n}\r\n\r\nexport function createSafeEvaluatorWhichTakesEndowments(safeEvaluatorFactory) {\r\n  return (x, endowments) => safeEvaluatorFactory(endowments)(x);\r\n}\r\n\r\n/**\r\n * A safe version of the native Function which relies on\r\n * the safety of evalEvaluator for confinement.\r\n */\r\nexport function createFunctionEvaluator(unsafeRec, safeEval) {\r\n  const { unsafeFunction, unsafeGlobal } = unsafeRec;\r\n\r\n  const safeFunction = function Function(...params) {\r\n    const functionBody = `${arrayPop(params) || ''}`;\r\n    let functionParams = `${arrayJoin(params, ',')}`;\r\n    if (!regexpTest(/^[\\w\\s,]*$/, functionParams)) {\r\n      throw new unsafeGlobal.SyntaxError(\r\n        'shim limitation: Function arg must be simple ASCII identifiers, possibly separated by commas: no default values, pattern matches, or non-ASCII parameter names'\r\n      );\r\n      // this protects against Matt Austin's clever attack:\r\n      // Function(\"arg=`\", \"/*body`){});({x: this/**/\")\r\n      // which would turn into\r\n      //     (function(arg=`\r\n      //     /*``*/){\r\n      //      /*body`){});({x: this/**/\r\n      //     })\r\n      // which parses as a default argument of `\\n/*``*/){\\n/*body` , which\r\n      // is a pair of template literals back-to-back (so the first one\r\n      // nominally evaluates to the parser to use on the second one), which\r\n      // can't actually execute (because the first literal evals to a string,\r\n      // which can't be a parser function), but that doesn't matter because\r\n      // the function is bypassed entirely. When that gets evaluated, it\r\n      // defines (but does not invoke) a function, then evaluates a simple\r\n      // {x: this} expression, giving access to the safe global.\r\n    }\r\n\r\n    // Is this a real functionBody, or is someone attempting an injection\r\n    // attack? This will throw a SyntaxError if the string is not actually a\r\n    // function body. We coerce the body into a real string above to prevent\r\n    // someone from passing an object with a toString() that returns a safe\r\n    // string the first time, but an evil string the second time.\r\n    // eslint-disable-next-line no-new, new-cap\r\n    new unsafeFunction(functionBody);\r\n\r\n    if (stringIncludes(functionParams, ')')) {\r\n      // If the formal parameters string include ) - an illegal\r\n      // character - it may make the combined function expression\r\n      // compile. We avoid this problem by checking for this early on.\r\n\r\n      // note: v8 throws just like this does, but chrome accepts e.g. 'a = new Date()'\r\n      throw new unsafeGlobal.SyntaxError(\r\n        'shim limitation: Function arg string contains parenthesis'\r\n      );\r\n      // todo: shim integrity threat if they change SyntaxError\r\n    }\r\n\r\n    // todo: check to make sure this .length is safe. markm says safe.\r\n    if (functionParams.length > 0) {\r\n      // If the formal parameters include an unbalanced block comment, the\r\n      // function must be rejected. Since JavaScript does not allow nested\r\n      // comments we can include a trailing block comment to catch this.\r\n      functionParams += '\\n/*``*/';\r\n    }\r\n\r\n    // todo: fix `this` binding in Function().\r\n    const src = `(function(${functionParams}){\\n${functionBody}\\n})`;\r\n\r\n    return safeEval(src);\r\n  };\r\n\r\n  // Ensure that Function from any compartment in a root realm can be used\r\n  // with instance checks in any compartment of the same root realm.\r\n  setPrototypeOf(safeFunction, unsafeFunction.prototype);\r\n\r\n  assert(getPrototypeOf(safeFunction).constructor !== Function, 'hide Function');\r\n  assert(getPrototypeOf(safeFunction).constructor !== unsafeFunction, 'hide unsafeFunction');\r\n\r\n  defineProperties(safeFunction, {\r\n    // Ensure that any function created in any compartment in a root realm is an\r\n    // instance of Function in any compartment of the same root ralm.\r\n    prototype: { value: unsafeFunction.prototype },\r\n\r\n    // Provide a custom output without overwriting the Function.prototype.toString\r\n    // which is called by some third-party libraries.\r\n    toString: {\r\n      value: safeEval(\"() => 'function Function() { [shim code] }'\"),\r\n      writable: false,\r\n      enumerable: false,\r\n      configurable: true\r\n    }\r\n  });\r\n\r\n  return safeFunction;\r\n}\r\n","import { createRealmFacade, buildChildRealm } from './realmFacade';\r\nimport { createNewUnsafeRec, createCurrentUnsafeRec } from './unsafeRec';\r\nimport {\r\n  createSafeEvaluatorFactory,\r\n  createSafeEvaluator,\r\n  createSafeEvaluatorWhichTakesEndowments,\r\n  createFunctionEvaluator\r\n} from './evaluators';\r\nimport { assert } from './utilities';\r\nimport { create, defineProperties, freeze, arrayConcat } from './commons';\r\n\r\n// Mimic private members on the realm instances.\r\n// We define it in the same module and do not export it.\r\nconst RealmRecForRealmInstance = new WeakMap();\r\n\r\nfunction getRealmRecForRealmInstance(realm) {\r\n  // Detect non-objects.\r\n  assert(Object(realm) === realm, 'bad object, not a Realm instance');\r\n  // Realm instance has no realmRec. Should not proceed.\r\n  assert(RealmRecForRealmInstance.has(realm), 'Realm instance has no record');\r\n\r\n  return RealmRecForRealmInstance.get(realm);\r\n}\r\n\r\nfunction registerRealmRecForRealmInstance(realm, realmRec) {\r\n  // Detect non-objects.\r\n  assert(Object(realm) === realm, 'bad object, not a Realm instance');\r\n  // Attempt to change an existing realmRec on a realm instance. Should not proceed.\r\n  assert(!RealmRecForRealmInstance.has(realm), 'Realm instance already has a record');\r\n\r\n  RealmRecForRealmInstance.set(realm, realmRec);\r\n}\r\n\r\n// Initialize the global variables for the new Realm.\r\nfunction setDefaultBindings(sharedGlobalDescs, safeGlobal, safeEval, safeFunction) {\r\n  defineProperties(safeGlobal, sharedGlobalDescs);\r\n\r\n  defineProperties(safeGlobal, {\r\n    eval: {\r\n      value: safeEval,\r\n      writable: true,\r\n      configurable: true\r\n    },\r\n    Function: {\r\n      value: safeFunction,\r\n      writable: true,\r\n      configurable: true\r\n    }\r\n  });\r\n}\r\n\r\nfunction createRealmRec(unsafeRec) {\r\n  const { sharedGlobalDescs, unsafeGlobal } = unsafeRec;\r\n\r\n  const safeGlobal = create(unsafeGlobal.Object.prototype);\r\n  const safeEvaluatorFactory = createSafeEvaluatorFactory(unsafeRec, safeGlobal);\r\n  const safeEval = createSafeEvaluator(safeEvaluatorFactory);\r\n  const safeEvalWhichTakesEndowments = createSafeEvaluatorWhichTakesEndowments(\r\n    safeEvaluatorFactory\r\n  );\r\n  const safeFunction = createFunctionEvaluator(unsafeRec, safeEval);\r\n\r\n  setDefaultBindings(sharedGlobalDescs, safeGlobal, safeEval, safeFunction);\r\n\r\n  const realmRec = freeze({\r\n    safeGlobal,\r\n    safeEval,\r\n    safeEvalWhichTakesEndowments,\r\n    safeFunction\r\n  });\r\n\r\n  return realmRec;\r\n}\r\n\r\n/**\r\n * A root realm uses a fresh set of new intrinics. Here we first create\r\n * a new unsafe record, which inherits the shims. Then we proceed with\r\n * the creation of the realm record, and we apply the shims.\r\n */\r\nfunction initRootRealm(parentUnsafeRec, self, options) {\r\n  // note: 'self' is the instance of the Realm.\r\n\r\n  // todo: investigate attacks via Array.species\r\n  // todo: this accepts newShims='string', but it should reject that\r\n  const { shims: newShims } = options;\r\n  const allShims = arrayConcat(parentUnsafeRec.allShims, newShims);\r\n\r\n  // The unsafe record is created already repaired.\r\n  const unsafeRec = createNewUnsafeRec(allShims);\r\n\r\n  // eslint-disable-next-line no-use-before-define\r\n  const Realm = createRealmFacade(unsafeRec, BaseRealm);\r\n\r\n  // Add a Realm descriptor to sharedGlobalDescs, so it can be defined onto the\r\n  // safeGlobal like the rest of the globals.\r\n  unsafeRec.sharedGlobalDescs.Realm = {\r\n    value: Realm,\r\n    writable: true,\r\n    configurable: true\r\n  };\r\n\r\n  // Creating the realmRec provides the global object, eval() and Function()\r\n  // to the realm.\r\n  const realmRec = createRealmRec(unsafeRec);\r\n\r\n  // Apply all shims in the new RootRealm. We don't do this for compartments.\r\n  const { safeEvalWhichTakesEndowments } = realmRec;\r\n  for (const shim of allShims) {\r\n    safeEvalWhichTakesEndowments(shim);\r\n  }\r\n\r\n  // The realmRec acts as a private field on the realm instance.\r\n  registerRealmRecForRealmInstance(self, realmRec);\r\n}\r\n\r\n/**\r\n * A compartment shares the intrinsics of its root realm. Here, only a\r\n * realmRec is necessary to hold the global object, eval() and Function().\r\n */\r\nfunction initCompartment(unsafeRec, self) {\r\n  // note: 'self' is the instance of the Realm.\r\n\r\n  const realmRec = createRealmRec(unsafeRec);\r\n\r\n  // The realmRec acts as a private field on the realm instance.\r\n  registerRealmRecForRealmInstance(self, realmRec);\r\n}\r\n\r\nfunction getRealmGlobal(self) {\r\n  const { safeGlobal } = getRealmRecForRealmInstance(self);\r\n  return safeGlobal;\r\n}\r\n\r\nfunction realmEvaluate(self, x, endowments = {}) {\r\n  // todo: don't pass in primal-realm objects like {}, for safety. OTOH its\r\n  // properties are copied onto the new global 'target'.\r\n  // todo: figure out a way to membrane away the contents to safety.\r\n  const { safeEvalWhichTakesEndowments } = getRealmRecForRealmInstance(self);\r\n  return safeEvalWhichTakesEndowments(x, endowments);\r\n}\r\n\r\nconst BaseRealm = {\r\n  initRootRealm,\r\n  initCompartment,\r\n  getRealmGlobal,\r\n  realmEvaluate\r\n};\r\n\r\n// Create the current unsafeRec from the current \"primal\" environment (the realm\r\n// where the Realm shim is loaded and executed).\r\nconst currentUnsafeRec = createCurrentUnsafeRec();\r\n\r\n/**\r\n * The \"primal\" realm class is defined in the current \"primal\" environment,\r\n * and is part of the shim. There is no need to facade this class via evaluation\r\n * because both share the same intrinsics.\r\n */\r\nconst Realm = buildChildRealm(currentUnsafeRec, BaseRealm);\r\n\r\nexport default Realm;\r\n"],"names":[],"mappings":"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"}