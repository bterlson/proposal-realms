<!doctype html>
<meta charset="utf8">
<link href="ecmarkup.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="ecmarkup.js"></script>
<pre class=metadata>
title: ECMAScript Realms Spec Proposal
stage: 0
contributors: Dave Herman, Caridy Patiño
status: draft
copyright: false
location: https://rawgit.com/caridy/proposal-realms/master/index.html
</pre>

<emu-table id="table-1" caption="Well-known Intrinsic Objects">
    <table>
        <tbody>
            <tr>
                <th>Intrinsic Name</th>
                <th>Global Name</th>
                <th>ECMAScript Language Association</th>
            </tr>
            <tr>
                <td>%Realm%</td>
                <td><code>Realm</code></td>
                <td>…</td>
            </tr>
            <tr>
                <td>%RealmPrototype%</td>
                <td><code>Realm.prototype</code></td>
                <td>…</td>
            </tr>
        </tbody>
    </table>
</emu-table>

<!-- es6num="8.2" -->
<emu-clause id="sec-code-realms">
  <h1>Realms</h1>

  <emu-table id="table-21" caption="Realm Record Fields">
    <table>
        <tbody>
            <tr>
                <th>Field Name</th>
                <th>Value</th>
                <th>Meaning</th>
            </tr>
            <tr>
                <td>[[HostDefined]]</td>
                <td>...</td>
                <td>...</td>
            </tr>
            <tr>
                <td>[[TransformTrap]]</td>
                <td>A function object or *undefined*</td>
                <td>The function that is used as the transform trap. If [[TransformTrap]] is undefined, the trap invoker will carry on the default behavior.</td>
            </tr>
            <tr>
                <td>[[IsDirectEvalTrap]]</td>
                <td>A function object or *undefined*</td>
                <td>The function that is used as the direct eval check trap. If [[IsDirectEvalTrap]] is undefined, the trap invoker will carry on the default behavior.</td>
            </tr>
            <tr>
                <td>[[ImportTrap]]</td>
                <td>A function object or *undefined*</td>
                <td>The function that is used as the import trap. If [[ImportTrap]] is undefined, the trap invoker will carry on the default behavior.</td>
            </tr>
            <tr>
                <td>[[ImportMetaTrap]]</td>
                <td>A function object or *undefined*</td>
                <td>The function that is used as the import.meta trap. If [[ImportMetaTrap]] is undefined, the trap invoker will carry on the default behavior.</td>
            </tr>
        </tbody>
    </table>
  </emu-table>

  <emu-clause id="sec-invokeisdirectevaltrap" aoid="InvokeIsDirectEvalTrap">
    <h1>InvokeIsDirectEvalTrap( _trap_, _func_ )</h1>
    <p>The abstract operation InvokeIsDirectEvalTrap with arguments _trap_ and _func_ performs the following steps:</p>
    <emu-alg>
      1. Assert: IsCallable(_trap_) is *true*.
      1. Let _result_ be ToBoolean( ? Call(_trap_, *undefined*, &laquo; _func_ &raquo;)).
      1. Return _result_.
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-invoketransformtrap" aoid="InvokeTransformTrap">
    <h1>InvokeTransformTrap ( _trap_, _sourceText_ )</h1>

    <p>The abstract operation InvokeTransformTrap with arguments _trap_ and _sourceText_ performs the following steps:</p>

    <emu-alg>
    1. Assert: IsCallable(_trap_) is *true*.
    1. Let _newSourceText_ be ? Call(_trap_, *undefined*, « _sourceText_ »).
    1. Return ? ToString(_newSourceText_).
    </emu-alg>
  </emu-clause>

  <emu-clause id="sec-invokeimporttrap" aoid="InvokeImportTrap">
    <h1>InvokeImportTrap ( _trap_, _referencingScriptOrModule_, _specifierString_, _promiseCapability_ )</h1>

    <p>The abstract operation InvokeImportTrap with arguments _trap_, _referencingScriptOrModule_, _specifier_ and _promiseCapability_ performs the following steps:</p>

    <emu-alg>
    1. Assert: IsCallable(_trap_) is *true*.
    1. Assert: Type(_specifierString_) is String.
    1. Assert: _referencingScriptOrModule_ is a Script Record or Module Record (i.e. is not null).
    1. Assert: _resultCapability_ is a PromiseCapability Record.
    1. If _referencingScriptOrModule_ is a Module Record, then
      1. Assert: ModuleEvaluation has already been invoked on _referencingScriptOrModule_ and successfully completed.
      1. Let _referrer_ be GetModuleNamespace(_referencingScriptOrModule_).
      1. IfAbruptRejectPromise(_referrer_, _promiseCapability_).
    1. Else,
      1. Let _referrer_ be *null*.
    1. Let _value_ be Call(_trap_, *undefined*, « _referrer_, _specifier_ »).
    1. IfAbruptRejectPromise(_value_, _promiseCapability_).
    1. Perform ! Call(_promiseCapability_.[[Resolve]], *undefined*, « _value_ »).
    </emu-alg>
  </emu-clause>

</emu-clause>

<!-- es6num="18.2.1.1" -->
<emu-clause id="sec-performeval" aoid="PerformEval">
  <h1>Runtime Semantics: PerformEval( _x_, _evalRealm_, _strictCaller_, _direct_ )</h1>
  <p>The abstract operation PerformEval with arguments _x_, _evalRealm_, _strictCaller_, and _direct_ performs the following steps:</p>
  <emu-alg>
    1. Assert: If _direct_ is *false*, then _strictCaller_ is also *false*.
    1. If Type(_x_) is not String, return _x_.
    1. <ins>Let _callerContext_ be the second to top element of the execution context stack.</ins>.
    1. <ins>Let _realmTraps_ be _callerContext_.[[RealmTraps]]</ins>.
    1. <ins>If _realmTraps_ is a RealmTraps Record, then</ins>
      1. <ins>Let _fn_ be _realmTraps_.[[TransformTrap]]</ins>.
      1. <ins>Assert: IsCallable(_fn_) is *true*</ins>.
      1. <ins>Let x be ? InvokeTransformTrap(_fn_, _x_ ).</ins>.
    1. ...
  </emu-alg>
</emu-clause>

<!-- es6num="12.3.4.1" -->
<emu-clause id="sec-function-calls-runtime-semantics-evaluation">
  <h1>Runtime Semantics: Evaluation</h1>
  <emu-grammar>CallExpression : CoverCallExpressionAndAsyncArrowHead</emu-grammar>
  <emu-alg>
    5. ...
    1. If Type(_ref_) is Reference and IsPropertyReference(_ref_) is *false* and GetReferencedName(_ref_) is `"eval"`, then
      1. <ins>Let _callerContext_ be the second to top element of the execution context stack.</ins>.
      1. <ins>Let _realmTraps_ be _callerContext_.[[RealmTraps]]</ins>.
      1. <ins>If _realmTraps_ is a RealmTraps Record, then</ins>
        1. <ins>Let _trapFn_ be _realmTraps_.[[IsDirectEvalTrap]]</ins>.
        1. <ins>Assert: IsCallable(_trapFn_) is *true*</ins>.
        1. <ins>Let _isDirectEval_ be ? InvokeIsDirectEvalTrap(_trapFn_, _func_).</ins>.
      1.  <ins>Else</ins>,
        1. <ins>Let _isDirectEval_ be SameValue(_func_, %eval%)</ins>.
      1. If <ins>_isDirectEval_</ins><del>SameValue(_func_, %eval%)</del> is *true*, then
        1. Let _argList_ be ? ArgumentListEvaluation(_arguments_).
        1. ...
    1. ...
  </emu-alg>
  ...
</emu-clause>

<!-- es6num="2.2.1" -->
<!-- https://tc39.github.io/proposal-dynamic-import/#sec-import-calls -->
<emu-clause id="sec-import-calls">
  <h1><ins>Import Calls</ins></h1>

  <emu-clause id="sec-import-call-runtime-semantics-evaluation">
    <h1>Runtime Semantics: Evaluation</h1>

  <emu-grammar>ImportCall : `import` `(` AssignmentExpression `)`</emu-grammar>
  <emu-alg>
    1. Let _referencingScriptOrModule_ be ! GetActiveScriptOrModule().
    1. Assert: _referencingScriptOrModule_ is a Script Record or Module Record (i.e. is not *null*).
    1. Let _argRef_ be the result of evaluating |AssignmentExpression|.
    1. Let _specifier_ be ? GetValue(_argRef_).
    1. Let _promiseCapability_ be ! NewPromiseCapability(%Promise%).
    1. Let _specifierString_ be ToString(_specifier_).
    1. IfAbruptRejectPromise(_specifierString_, _promiseCapability_).
    1. <ins>Let _callerContext_ be the second to top element of the execution context stack.</ins>.
    1. <ins>Let _realmTraps_ be _callerContext_.[[RealmTraps]]</ins>.
    1. <ins>If _realmTraps_ is a RealmTraps Record, then</ins>
      1. <ins>Let _fn_ be _realmTraps_.[[ImportTrap]]</ins>.
      1. <ins>Assert: IsCallable(_fn_) is *true*</ins>.
      1. <ins>Perform ! InvokeImportTrap(_fn_, _referencingScriptOrModule_, _specifierString_, _promiseCapability_ ).</ins>.
    1. <ins>Else,</ins>
      1. Perform ! HostImportModuleDynamically(_referencingScriptOrModule_, _specifierString_, _promiseCapability_).
    1. Return _promiseCapability_.[[Promise]].
  </emu-alg>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-realm-objects">
  <h1>Realm Objects</h1>
  <emu-clause id="sec-realm-abstract-operations">
    <h1>Realm Abstract Operations</h1>
    <emu-clause id="sec-create-realm-rec">
      <h1>CreateRealmRec ( _intrinsics_ )</h1>
      <emu-alg>
      1. Let _realmRec_ be a new Realm Record.
      1. If _intrinsics_ is *undefined*, then
        1. Perform CreateIntrinsics(realmRec).
      1. Else
        1. Assert: In this case, _intrinsics_ must be a Record with field names listed in column one of Table 7.
        1. Set _realmRec_.[[Intrinsics]] to _intrinsics_.
      1. Set _realmRec_.[[GlobalObject]] to *undefined*.
      1. Set _realmRec_.[[GlobalEnv]] to *undefined*.
      1. Set _realmRec_.[[TemplateMap]] to a new empty List.
      1. Return _realmRec_.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-realm-built-in-function-objects">
    <h1>Built-in Function Objects</h1>

    <emu-clause id="sec-realm-default-import-trap-functions">
      <h1>Realm Default Import Trap Functions</h1>

      <p>A Realm default import trap function is an anonymous built-in function.</p>

      <p>When a Realm default import trap function is called with arguments _realm_, _referrer_ and _specifier_, the following steps are taken:</p>

      <emu-alg>
        1. Throw a new *TypeError*.
      </emu-alg>

      <emu-note>
        By default, newly created realms do not expose host specific behavior when evaluating _import()_ calls.
      </emu-note>
    </emu-clause>
  </emu-clause>


  <emu-clause id="sec-the-realm-constructor">
      <h1>The Realm Constructor</h1>

      <p>
          The Ream constructor is the %Realm% intrinsic object and the initial value of the *Realm* property of the global object. When called as a constructor it creates and initializes a new Realm object. Realm is not intended to be called as a function and will throw an exception when called in that manner.
      </p>

      <p>
          The Realm constructor is designed to be subclassable. It may be used as the value in an extends clause of a class definition. Subclass constructors that intend to inherit the specified Realm behaviour must include a super call to the Realm constructor to create and initialize the subclass instance with the internal state necessary to support the Realm.prototype built-in methods.
      </p>

      <emu-clause id="sec-realm" aoid="Realm">
          <h1>Realm ([ _options_ ])</h1>

          When Realm is called with argument _option_ performs the following steps:

          <emu-alg>
          1. If NewTarget is *undefined*, throw a *TypeError* exception.
          1. Let _O_ be ? OrdinaryCreateFromConstructor(NewTarget, "%RealmPrototype%", « [[Realm]] »).
          1. If _options_ is not *undefined*, then
            1. Let _parentRealm_ be the current Realm Record.
            1. Let _opts_ be ? ToObject(_options_).
            1. Let _importTrap_ be ? Get(_opts_, "import").
            1. If _importTrap_ is equal `"inherit"`, then
              1. Set _importTrap_ to _parentRealm_.[[ImportTrap]].
            1. Else if _importTrap_ is not *undefined* and IsCallable(_importTrap_) is *false*, throw a TypeError exception.
            1. Let _importMetaTrap_ be ? Get(_opts_, "importMeta").
            1. If _importMetaTrap_ is equal `"inherit"`, then
              1. Set _importMetaTrap_ to _parentRealm_.[[ImportMetaTrap]].
            1. Else if _importMetaTrap_ is not *undefined* and IsCallable(_importMetaTrap_) is *false*, throw a TypeError exception.
            1. Let _transformTrap_ be ? Get(_opts_, "transform").
            1. If _transformTrap_ is equal `"inherit"`, then
              1. Set _transformTrap_ to _parentRealm_.[[TransformTrap]].
            1. Else if _transformTrap_ is not *undefined* and IsCallable(_transformTrap_) is *false*, throw a TypeError exception.
            1. Let _isDirectEvalTrap_ be ? Get(_opts_, "isDirectEval").
            1. If _isDirectEvalTrap_ is equal `"inherit"`, then
              1. Set _isDirectEvalTrap_ to _parentRealm_.[[IsDirectEvalTrap]].
            1. Else if _isDirectEvalTrap_ is not *undefined* and IsCallable(_isDirectEvalTrap_) is *false*, throw a TypeError exception.
            1. Let _intrinsics_ be ? Get(_opts_, "intrinsics").
            1. If _intrinsics_ is equal `"inherit"`, then
              1. Set _intrinsics_ to _parentRealm_.[[Intrinsics]].
            1. Else if _intrinsics_ is not *undefined*, throw a TypeError exception.
            1. Let _thisValue_ be ? Get(_opts_, "thisValue").
            1. If _thisValue_ is not *undefined* and Type(_thisValue_) is not Object, throw a TypeError exception.
          1. Let _realmRec_ be CreateRealmRec(_intrinsics_).
          1. Set _O_.[[Realm]] to _realmRec_.
          1. Perform ? SetRealmGlobalObject(_realmRec_, *undefined*, _thisValue_).
          1. If _importTrap_ is *undefined*, then
            1. Let _importTrap_ be a new built-in function object as defined in <emu-xref href="#sec-realm-default-import-trap-functions"></emu-xref>.
          1. Set _realmRec_.[[ImportTrap]] to _importTrap_.
          1. If _transformTrap_ is not *undefined*, then
            1. Set _realmRec_.[[TransformTrap]] to _transformTrap_.
          1. If _isDirectEvalTrap_ is not *undefined*, then
            1. Set _realmRec_.[[IsDirectEvalTrap]] to _isDirectEvalTrap_.
          1. Let _init_ be ? GetMethod(_O_, *"init"*).
          1. If IsCallable(_init_) is not *true*, throw a *TypeError* exception.
          1. Perform ? Call(_init_, _O_).
          1. Return _O_.
          </emu-alg>

      </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-the-realm-constructor">
      <h1>Properties of the Realm Constructor</h1>

      The value of the [[Prototype]] internal slot of the *Realm* constructor is the intrinsic object %FunctionPrototype%.

  </emu-clause>

  <emu-clause id="sec-properties-of-the-realm-prototype-object">
      <h1>Properties of the Realm Prototype Object</h1>

      <emu-clause id="sec-realm.prototype.init">
          <h1>Realm.prototype.init ()</h1>

          <emu-alg>
          1. Let _O_ be *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. If _O_ does not have an [[Realm]] internal slot, throw a *TypeError* exception.
          1. Perform ? SetDefaultGlobalBindings(_O_.[[Realm]]).
          </emu-alg>

          <emu-note>
              Extensible web: This is the dynamic way to define globals in a new realm.
          </emu-note>
      </emu-clause>

      <emu-clause id="sec-realm.prototype.eval">
          <h1>Realm.prototype.eval ( _x_ )</h1>

          Synchronously execute a top-level script. The _x_ is interpreted as a Script and evaluated with this bound to the realm's global object.

          <emu-alg>
          1. Let _O_ be *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. If _O_ does not have an [[Realm]] internal slot, throw a *TypeError* exception.
          1. Let _evalRealm_ be _O_.[[Realm]].
          1. Perform ? HostEnsureCanCompileStrings(the current Realm Record, _evalRealm_).
          1. Return ? PerformEval(_x_, _evalRealm_, *false*, *false*).
          </emu-alg>

          <emu-note>
              Extensible web: This is the dynamic equivalent of a &lt;script&gt; in HTML.
          </emu-note>
      </emu-clause>

      <emu-clause id="sec-realm.prototype.global">
          <h1>get Realm.prototype.global</h1>

          Realm.prototype.global is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:

          <emu-alg>
          1. Let _O_ be *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. If _O_ does not have an [[Realm]] internal slot, throw a *TypeError* exception.
          1. Return _O_.[[Realm]].[[GlobalObject]].
          </emu-alg>
      </emu-clause>

      <emu-clause id="sec-realm.prototype.thisValue">
          <h1>get Realm.prototype.thisValue</h1>

          Realm.prototype.thisValue is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:

          <emu-alg>
          1. Let _O_ be *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. If _O_ does not have an [[Realm]] internal slot, throw a *TypeError* exception.
          1. Let _envRec_ be _O_.[[Realm]].[[GlobalEnv]].
          1. Return _envRec_.[[GlobalThisValue]].
          </emu-alg>
      </emu-clause>

      <emu-clause id="sec-realm.prototype.stdlib">
          <h1>get Realm.prototype.stdlib</h1>

          Realm.prototype.stdlib is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:

          <emu-alg>
          1. Let _O_ be *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. If _O_ does not have an [[Realm]] internal slot, throw a *TypeError* exception.
          1. Let _realmRec_ be _O_.[[Realm]].
          1. Let global be realmRec.[[GlobalObject]].
          1. Let _stdlib_ be ObjectCreate(%ObjectPrototype%).
          1. For each property of the Global Object specified in clause <emu-xref href="#sec-global-object"></emu-xref> that correspond to an intrinsic object, do:
            1. Let _name_ be the String value of the property name.
            1. Let _value_ be the corresponding value of the intrinsic object from record _realmRec_.[[Intrinsics]].
            1. Let _descObj_ be ObjectCreate(%ObjectPrototype%).
            1. Perform ? DefinePropertyOrThrow(_descObj_, *"value"*, PropertyDescriptor{[[Value]]: _value_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *true*}).
            1. Perform ? DefinePropertyOrThrow(_stdlib_, _name_, PropertyDescriptor{[[Value]]: _descObj_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *true*}).
          1. Return _stdlib_.
          </emu-alg>
      </emu-clause>

      <emu-clause id="sec-realm.prototype.intrinsics">
          <h1>get Realm.prototype.intrinsics</h1>

          Realm.prototype.intrinsics is an accessor property whose set accessor function is *undefined*. Its get accessor function performs the following steps:

          <emu-alg>
          1. Let _O_ be *this* value.
          1. If Type(_O_) is not Object, throw a *TypeError* exception.
          1. If _O_ does not have an [[Realm]] internal slot, throw a *TypeError* exception.
          1. Let _realmRec_ be _O_.[[Realm]].
          1. Let _intrinsics_ be ObjectCreate(%ObjectPrototype%).
          1. For each intrinsic name listed in <emu-xref href="#table-7"></emu-xref>, do:
            1. Let _intrinsicName_ be the String value in column one of the table.
            1. Let _name_ be the String value of _intrinsicName_ without the *%* symbols.
            1. Let _value_ be the value of the field name _intrisicName_ from record _realmRec_.[[Intrinsics]].
            1. Perform ? DefinePropertyOrThrow(_intrinsics_, _name_, PropertyDescriptor{[[Value]]: _value_, [[Writable]]: *true*, [[Enumerable]]: *true*, [[Configurable]]: *true*}).
          1. Return _intrinsics_.
          </emu-alg>
      </emu-clause>

      <emu-clause id="sec-realm.prototype-@@tostringtag">
          <h1>Realm.prototype [ @@toStringTag ]</h1>

          The initial value of the @@toStringTag property is the String value "Realm".

          This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.
      </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-realm-instances">
      <h1>Properties of Realm Instances</h1>

      Realm instances are ordinary objects that inherit properties from the Realm prototype object (the intrinsic, %RealmPrototype%). Realm instances are initially created with the internal slots described in <emu-xref href="#table-3"></emu-xref>.

      <emu-table id="table-3" caption="Internal Slots of Realm Instances">
          <table>
              <tbody>
                  <tr>
                      <th>Internal Slot</th>
                      <th>Type</th>
                      <th>Description</th>
                  </tr>
                  <tr>
                      <td>[[Realm]]</td>
                      <td>Realm Record</td>
                      <td>The Realm Record for the initial execution context.</td>
                  </tr>
                  <tr>
                    <td>[[TransformTrap]]</td>
                    <td>A function object or *undefined*</td>
                    <td>The function that is used as the transform trap. If [[TransformTrap]] is undefined, the trap invoker will carry on the default behavior.</td>
                </tr>
                <tr>
                    <td>[[IsDirectEvalTrap]]</td>
                    <td>A function object or *undefined*</td>
                    <td>The function that is used as the direct eval check trap. If [[IsDirectEvalTrap]] is undefined, the trap invoker will carry on the default behavior.</td>
                </tr>
                <tr>
                    <td>[[ImportTrap]]</td>
                    <td>A function object or *undefined*</td>
                    <td>The function that is used as the import trap. If [[ImportTrap]] is undefined, the trap invoker will carry on the default behavior.</td>
                </tr>
                <tr>
                    <td>[[ImportMetaTrap]]</td>
                    <td>A function object or *undefined*</td>
                    <td>The function that is used as the import.meta trap. If [[ImportMetaTrap]] is undefined, the trap invoker will carry on the default behavior.</td>
                </tr>
              </tbody>
          </table>
      </emu-table>

  </emu-clause>

</emu-clause>
